# include:
  # - template: Security/SAST.gitlab-ci.yml
 
variables:
  # SAST_EXPERIMENTAL_STRING: "HELLO SAST"
  VERSION: 1.0.${CI_PIPELINE_ID}
  MAVEN_REPO_PATH: ${CI_PROJECT_DIR}/.m2/repository
  JAVA_OPTS: -XX:MaxRAMPercentage=90
 
stages:
  - build
  - test
  - release
  - deploy
  - notify

cache:
  paths:
    - ${CI_PROJECT_DIR}/.m2/repository

build-backend-code-job:
  # variables:
    # VERSION: 1.0.${CI_PIPELINE_ID}
    # MAVEN_REPO_PATH: ${CI_PROJECT_DIR}/.m2/repository
  stage: build
  variables:
    SPRING_FLYWAY_ENABLED: "false"  
  # only:
    # changes:
    # - backend/*/
  image:
    name: gcr.io/kaniko-project/executor:v1.9.0-debug
    entrypoint: [""]
  # переменные CI_REGISTRY_USER, CI_REGISTRY_PASSWORD, CI_REGISTRY генерятся Гитлабом, их задавать не надо
  script:
    - echo "start build backend"
    - /kaniko/executor
      --context "${CI_PROJECT_DIR}/backend"
      --dockerfile "${CI_PROJECT_DIR}/backend/Dockerfile"
      --destination "${CI_REGISTRY_IMAGE}/sausage-backend:$CI_COMMIT_SHA"
      --build-arg VERSION=$VERSION
      --cache=true

sonarqube-backend-sast:
  stage: test
  needs:
    - build-backend-code-job
  image: maven:3.8-openjdk-16
  variables:
    SPRING_FLYWAY_ENABLED: "false"
    SPRING_CLOUD_VAULT_ENABLED: "false"
  script:   
    - cd backend 
    - unset SPRING_DATASOURCE_URL
    - unset SPRING_DATASOURCE_USERNAME
    - unset SPRING_DATASOURCE_PASSWORD  
    - mvn verify sonar:sonar -Dsonar.projectKey=$SONAR_KEY_BACKEND -Dsonar.host.url=$SONARQUBE_URL -Dsonar.login=$SONAR_LOGIN -Dsonar.projectName=$SONAR_KEY_BACKEND -e -X

gitlab-sast:
  stage: test
  variables:
    SPRING_FLYWAY_ENABLED: "false"
  needs:
    - build-backend-code-job
  trigger:
    include:
      - template: Security/SAST.gitlab-ci.yml

uupload-backend:
  stage: release
  variables:
    GIT_STRATEGY: none
  image:
    name: gcr.io/go-containerregistry/crane:debug
    entrypoint: [ "" ]
  cache: [ ]
  before_script:
    - crane auth login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - crane tag $CI_REGISTRY_IMAGE/sausage-backend:$CI_COMMIT_SHA $VERSION

deploy-backend:
    stage: deploy
    image: docker:24.0.7-alpine3.19
    environment:
        name: production/backend
    # when: manual
    before_script:
        - echo "Устанавливаем необходимые зависимости"
        - apk add docker-cli-compose openssh-client
        - eval $(ssh-agent -s)
        - echo "Добавляем ключ"
        - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
        - echo "Настраиваем SSH"
        - mkdir -p ~/.ssh
        - chmod 700 ~/.ssh
        - echo "$SSH_KNOWN_HOSTS" >> ~/.ssh/known_hosts
        - chmod 644 ~/.ssh/known_hosts
        - ssh-keyscan -H ${DEV_HOST} >> ~/.ssh/known_hosts
        - chmod 644 ~/.ssh/known_hosts
        - docker context create remote --description "remote ssh" --docker "host=ssh://${DEV_USER}@${DEV_HOST}"
    script:
        - echo "VERSION=${VERSION}" >> deploy.env
        - echo "SPRING_DATASOURCE_URL=${PSQL_DATASOURCE}" >> deploy.env
        - echo "SPRING_DATASOURCE_USERNAME=${PSQL_USER}" >> deploy.env
        - echo "SPRING_DATASOURCE_PASSWORD=${PSQL_PASSWORD}" >> deploy.env
        - echo "REPORTS_MONGODB_URI=${SPRING_DATA_MONGODB_URI}" >> deploy.env
        - echo "REPORT_PATH=/var/www-data/htdocs" >> deploy.env
        - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
        - chmod +x deploy.sh
        - ./deploy.sh
    

telegram-notification-backend:
  stage: notify
  script:
    - |
      if [[ "$CI_COMMIT_MESSAGE" == *"send notification"* ]]; then
        message="Александр Гааг собрал Backend \nАртефакт доступен по [ссылке](${NEXUS_REPO_URL}/repository/${NEXUS_REPO_BACKEND_NAME}/com/yandex/practicum/devops/sausage-store/${VERSION}/sausage-store-${VERSION}.jar)"
        curl -X POST -H 'Content-type: application/json' \
        --data "{\"chat_id\": \"-1002138916913\", \"text\": \"$message\", \"parse_mode\": \"markdown\"}" \
        https://api.telegram.org/bot5933756043:AAE8JLL5KIzgrNBeTP5e-1bkbJy4YRoeGjs/sendMessage
      fi
  only:
    variables:
      - $CI_COMMIT_MESSAGE
      - $CI_PIPELINE_SOURCE
    # changes:
      # - backend/*
  needs:
    - job: build-backend-code-job
