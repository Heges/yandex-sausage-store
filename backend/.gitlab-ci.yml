# include:
  # - template: Security/SAST.gitlab-ci.yml
 
variables:
  # SAST_EXPERIMENTAL_STRING: "HELLO SAST"
  VERSION: 1.0.${CI_PIPELINE_ID}
  MAVEN_REPO_PATH: ${CI_PROJECT_DIR}/.m2/repository
  JAVA_OPTS: -XX:MaxRAMPercentage=90
 
stages:
  - build
  - test
  - release
  - deploy
  - notify

cache:
  paths:
    - ${CI_PROJECT_DIR}/.m2/repository

build-backend-code-job:
  # variables:
    # VERSION: 1.0.${CI_PIPELINE_ID}
    # MAVEN_REPO_PATH: ${CI_PROJECT_DIR}/.m2/repository
  stage: build  
  # only:
    # changes:
    # - backend/*/
  script:
    - cd backend
    - >
      mvn verify sonar:sonar -Dsonar.qualitygate.wait=true
      -Dsonar.projectKey=${SONAR_PROJECT_KEY_BACK}
      -Dsonar.host.url=${SONARQUBE_URL}
      -Dsonar.login=${SONAR_LOGIN_BACK}
  # artifacts:
    # paths:
      # - backend/target/sausage-store-${VERSION}.jar
      # - ${CI_PROJECT_DIR}/.m2/

sonarqube-backend-sast:
  stage: test
  image: maven:3.8-openjdk-16
  needs:
    - build-backend
  script:
    - cd backend
    - >
      mvn verify sonar:sonar -Dsonar.qualitygate.wait=true
      -Dsonar.projectKey=${SONAR_PROJECT_KEY_BACK}
      -Dsonar.host.url=${SONARQUBE_URL}
      -Dsonar.login=${SONAR_LOGIN_BACK}

# Запуск проверки безопасности
gitlab-sast:
  stage: test
  needs:
    - build-backend
  trigger:
    include:
      - template: Security/SAST.gitlab-ci.yml

upload-backend:
  stage: release
  needs:
    - sonarqube-backend-sast
    - gitlab-sast
  script:
    - cd backend
    - mvn deploy -DskipTests -Dmaven.repo.local=${MAVEN_REPO_PATH} -s settings.xml -Dversion.application=${VERSION}

deploy-backend:
  stage: deploy
  needs:
    - upload-backend
  before_script:
    - 'command -v ssh-agent >/dev/null || ( apt-get update -y && apt-get install openssh-client -y )'
    - eval $(ssh-agent -s)
    - echo "${SSH_PRIVATE_KEY}" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 600 ~/.ssh
    - echo "${SSH_KNOWN_HOSTS}" >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
  script:
    - scp ./backend/backend.service ${DEV_USER}@${DEV_HOST}:/home/${DEV_USER}/backend.service
    - ssh ${DEV_USER}@${DEV_HOST} "export "CURRENT_VERSION=${VERSION}"; export "VERSION=${VERSION}"; export "DEV_HOST=${DEV_HOST}";export "NEXUS_REPO_URL=${NEXUS_REPO_URL}"; export "NEXUS_REPO_BACKEND_NAME=${NEXUS_REPO_BACKEND_NAME}"; export "NEXUS_REPO_USER=${NEXUS_REPO_USER}"; export "NEXUS_REPO_PASS=${NEXUS_REPO_PASS}"; setsid /bin/bash -s " < ./backend/deploy.sh
  environment:
    name: review/$CI_COMMIT_REF_NAME
    url: http://${DEV_HOST}:8080
    auto_stop_in: 1h
  rules:
    - when: manual

telegram-notification-backend:
  stage: notify
  script:
    - |
      if [[ "$CI_COMMIT_MESSAGE" == *"send notification"* ]]; then
        message="Александр Гааг собрал Backend \nАртефакт доступен по [ссылке](${NEXUS_REPO_URL}/repository/${NEXUS_REPO_BACKEND_NAME}/com/yandex/practicum/devops/sausage-store/${VERSION}/sausage-store-${VERSION}.jar)"
        curl -X POST -H 'Content-type: application/json' \
        --data "{\"chat_id\": \"-1002138916913\", \"text\": \"$message\", \"parse_mode\": \"markdown\"}" \
        https://api.telegram.org/bot5933756043:AAE8JLL5KIzgrNBeTP5e-1bkbJy4YRoeGjs/sendMessage
      fi
  only:
    variables:
      - $CI_COMMIT_MESSAGE
      - $CI_PIPELINE_SOURCE
    # changes:
      # - backend/*
  needs:
    - job: build-backend-code-job
