# include:
  # - template: Security/SAST.gitlab-ci.yml
 
variables:
  # SAST_EXPERIMENTAL_STRING: "HELLO SAST"
  VERSION: 1.0.${CI_PIPELINE_ID}
  MAVEN_REPO_PATH: ${CI_PROJECT_DIR}/.m2/repository
  JAVA_OPTS: -XX:MaxRAMPercentage=90
 
stages:
  - build
  - test
  - release
  - deploy
  - notify

cache:
  paths:
    - ${CI_PROJECT_DIR}/.m2/repository

build-backend-code-job:
  # variables:
    # VERSION: 1.0.${CI_PIPELINE_ID}
    # MAVEN_REPO_PATH: ${CI_PROJECT_DIR}/.m2/repository
  stage: build
  variables:
    SPRING_FLYWAY_ENABLED: "false"  
  # only:
    # changes:
    # - backend/*/
  script:
    - cd backend
    - mkdir -p ${MAVEN_REPO_PATH}
    - >
      mvn package -Dmaven.repo.local=${MAVEN_REPO_PATH}
      -Dversion.application=${VERSION}
  # artifacts:
    # paths:
      # - backend/target/sausage-store-${VERSION}.jar
      # - ${CI_PROJECT_DIR}/.m2/

sonarqube-backend-sast:
  stage: test
  variables:
    SPRING_FLYWAY_ENABLED: "false"
  image: "maven:3.8-openjdk-16"
  needs:
    - build-backend-code-job
  script:
    - cd backend
    - >
      mvn verify sonar:sonar -Dsonar.qualitygate.wait=true
      -Dsonar.projectKey=${SONAR_KEY_BACKEND}
      -Dsonar.host.url=${SONARQUBE_URL}
      -Dsonar.login=${SONAR_LOGIN}

gitlab-sast:
  stage: test
  variables:
    SPRING_FLYWAY_ENABLED: "false"
  needs:
    - build-backend-code-job
  trigger:
    include:
      - template: Security/SAST.gitlab-ci.yml

upload-backend:
  stage: release
  needs:
    - sonarqube-backend-sast
    - gitlab-sast
  script:
    - cd backend
    - mvn deploy -DskipTests -Dmaven.repo.local=${MAVEN_REPO_PATH} -s settings.xml -Dversion.application=${VERSION}

deploy-backend:
    stage: deploy
    image: docker:24.0.7-alpine3.19
    environment:
        name: production/backend
    when: manual
    before_script:
        - apk add docker-cli-compose openssh-client
        - eval $(ssh-agent -s)
        - echo "$SSH_PRIVATE_KEY"| tr -d '\r' | ssh-add -
        - mkdir -p ~/.ssh
        - chmod 600 ~/.ssh
        - echo "$SSH_KNOWN_HOSTS" >> ~/.ssh/known_hosts
        - chmod 644 ~/.ssh/known_hosts
        - docker context create remote --description "remote ssh" --docker "host=ssh://${DEV_USER}@${DEV_HOST}"
    script:
        - echo "VERSION=${VERSION}" >> deploy.env
        - echo "REPORTS_MONGODB_URI="mongodb://${MONGO_USER}:${MONGO_PASSWORD}@${MONGO_HOST}:27018/${MONGO_DATABASE}?tls=true"" >> deploy.env
        - echo "REPORT_PATH=/var/www-data/htdocs" >> deploy.env
        - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
        - docker --context remote compose --env-file deploy.env up frontend -d --pull "always" --force-recreate
    

telegram-notification-backend:
  stage: notify
  script:
    - |
      if [[ "$CI_COMMIT_MESSAGE" == *"send notification"* ]]; then
        message="Александр Гааг собрал Backend \nАртефакт доступен по [ссылке](${NEXUS_REPO_URL}/repository/${NEXUS_REPO_BACKEND_NAME}/com/yandex/practicum/devops/sausage-store/${VERSION}/sausage-store-${VERSION}.jar)"
        curl -X POST -H 'Content-type: application/json' \
        --data "{\"chat_id\": \"-1002138916913\", \"text\": \"$message\", \"parse_mode\": \"markdown\"}" \
        https://api.telegram.org/bot5933756043:AAE8JLL5KIzgrNBeTP5e-1bkbJy4YRoeGjs/sendMessage
      fi
  only:
    variables:
      - $CI_COMMIT_MESSAGE
      - $CI_PIPELINE_SOURCE
    # changes:
      # - backend/*
  needs:
    - job: build-backend-code-job
