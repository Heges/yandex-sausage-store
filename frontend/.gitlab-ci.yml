variables:
  VERSION: 1.0.${CI_PIPELINE_ID}
  
stages:
  - build
  - test
  - release
  - notify
  - deploy

cache:
  paths:
    - frontend/dist

build-frontend-code-job:
  stage: build  
  # only:
    # changes:
    # - frontend/*/
  script:        
    - cd frontend
    - npm install
    - npm run build
  # artifacts:
    # paths:
      # - frontend/dist/frontend

sonarqube-frontend-sast:
  stage: test
  needs:
    - build-frontend-code-job
  script:
    - cd frontend
    - npm install -g sonarqube-scanner
    - >
      sonar-scanner -Dsonar.projectKey=${SONAR_KEY_FRONTEND}
      -Dsonar.sources=.
      -Dsonar.host.url=${SONARQUBE_URL}
      -Dsonar.login=${SONAR_LOGIN}

gitlab-sast:
  stage: test
  needs:
    - build-frontend-code-job
  trigger:
    include:
      - template: Security/SAST.gitlab-ci.yml

upload-frontend-release:
  stage: release
  needs:
    - sonarqube-frontend-sast
    - gitlab-sast
  script:
    - cd frontend/dist
    - tar czvf sausage-store-${VERSION}.tar.gz frontend
    - >
      curl -u "${NEXUS_REPO_USER}:${NEXUS_REPO_PASS}"
      --upload-file sausage-store-${VERSION}.tar.gz
      ${NEXUS_REPO_URL}/repository/${NEXUS_REPO_FRONTEND_NAME}/${VERSION}/sausage-store-${VERSION}.tar.gz

deploy-frontend:
  stage: deploy
  needs:
    - upload-frontend-release
  before_script:
    - echo "Проверяем агент"
      - |
        if [ ! -f /usr/bin/ssh-agent ]; then
          apt-get update -y
          apt-get install openssh-client -y
        fi
        eval $(ssh-agent -s)
        echo "Добавляем ключ"
        echo "${SSH_PRIVATE_KEY}" | tr -d '\r' | ssh-add -
        echo "Выдаём права и настраиваем SSH"
        mkdir -p ~/.ssh
        chmod 700 ~/.ssh
        echo "${SSH_KNOWN_HOSTS}" >> ~/.ssh/known_hosts
        chmod 644 ~/.ssh/known_hosts
        ssh-keyscan -H ${DEV_HOST} >> ~/.ssh/known_hosts
        chmod 644 ~/.ssh/known_hosts
  script:
    - scp ./frontend/nginx.conf ${DEV_USER}@${DEV_HOST}:/home/${DEV_USER}/sausage.conf
    - ssh ${DEV_USER}@${DEV_HOST} "export "CURRENT_VERSION=${VERSION}"; export "VERSION=${VERSION}"; export "DEV_HOST=${DEV_HOST}"; export "NEXUS_REPO_URL=${NEXUS_REPO_URL}"; export "NEXUS_REPO_FRONTEND_NAME=${NEXUS_REPO_FRONTEND_NAME}"; export "NEXUS_REPO_USER=${NEXUS_REPO_USER}"; export "NEXUS_REPO_PASS=${NEXUS_REPO_PASS}"; setsid /bin/bash -s " < ./frontend/deploy.sh
  environment:
    name: review/$CI_COMMIT_REF_NAME
    url: http://${DEV_HOST}:80
    auto_stop_in: 1h
  rules:
    - when: manual

telegram-notification-frontend:
  stage: notify
  script:
    - |
      if [[ "$CI_COMMIT_MESSAGE" == *"send notification"* ]]; then
        message="Александр Гааг собрал Frontend \nАртефакт доступен по [ссылке](${NEXUS_REPO_URL}/repository/${NEXUS_REPO_BACKEND_NAME}/com/yandex/practicum/devops/sausage-store/${VERSION}/sausage-store-${VERSION}.jar"
        curl -X POST -H 'Content-type: application/json' \
        --data "{\"chat_id\": \"-1002138916913\", \"text\": \"$message\", \"parse_mode\": \"markdown\"}" \
        https://api.telegram.org/bot5933756043:AAE8JLL5KIzgrNBeTP5e-1bkbJy4YRoeGjs/sendMessage
      fi
  only:
    variables:
      - $CI_COMMIT_MESSAGE
      - $CI_PIPELINE_SOURCE
    # changes:
      # - frontend/*
  needs:
    - job: build-frontend-code-job